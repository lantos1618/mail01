{
  "to": "l.leong1618@gmail.com",
  "from": "agent@lambda.run",
  "subject": "ralph-mail01-launch-guide-complete",
  "timestamp": "2025-09-10T21:28:00Z",
  "content": "# Mail-01 Launch Guide & Authentication Clarification\n\n## Authentication Issues Clarified\n\nYou're absolutely right to be confused about the authentication setup. Here's what's happening:\n\n### Current Design Issue\n- **Problem**: Mail-01 currently requires Gmail credentials (username/password) in environment variables\n- **Why it's wrong**: This should indeed come from the app login, not separate credentials\n- **Security concern**: Storing email passwords directly is not best practice\n\n### What Should Happen (Proper Implementation)\n1. **OAuth2 Flow**: Users should authenticate via Google OAuth\n2. **App Login**: Single sign-on through the Mail-01 interface\n3. **Token Management**: Refresh tokens stored securely, not passwords\n4. **Google App ID**: Yes, you need a Google Cloud Project with Gmail API enabled\n\n## Current Setup (Temporary Solution)\n\n### Step 1: Environment Configuration\n```bash\n# Create .env file\ncp .env.example .env\n```\n\n### Step 2: Gmail App Password (Current Method)\n1. Go to Google Account settings\n2. Enable 2-factor authentication\n3. Generate App Password: Security → 2-Step Verification → App passwords\n4. Add to .env:\n```\nGMAIL_USER=your-email@gmail.com\nGMAIL_APP_PASSWORD=16-character-app-password\nOPENAI_API_KEY=your-openai-key\nSENDGRID_API_KEY=your-sendgrid-key (for agent emails)\n```\n\n### Step 3: Launch Application\n```bash\npnpm install\npnpm dev\n```\n\nAccess at: http://localhost:3000\n\n## Proper OAuth Implementation (TODO)\n\n### What's Needed:\n1. **Google Cloud Setup**:\n   - Create project at console.cloud.google.com\n   - Enable Gmail API\n   - Create OAuth 2.0 credentials\n   - Set redirect URIs\n\n2. **Code Changes Required**:\n   - Implement OAuth flow in `/apps/web/src/app/api/auth/`\n   - Add token refresh logic\n   - Store tokens securely (encrypted)\n   - Remove password-based authentication\n\n3. **User Flow**:\n   - User clicks \"Login with Google\"\n   - Authorizes Mail-01 to access Gmail\n   - Tokens stored, password never touched\n\n## Current Features Working\n\n- ✅ AI-powered email composition\n- ✅ Smart categorization\n- ✅ Thread summarization  \n- ✅ Multi-account support (with manual config)\n- ✅ Modern UI with assistant-ui\n- ⚠️ Gmail integration (password-based, not OAuth)\n\n## Migration Path\n\n1. **Immediate** (Now): Use Gmail App Password\n2. **Next Sprint**: Implement Google OAuth\n3. **Future**: Add Microsoft/Yahoo OAuth support\n\n## Security Recommendations\n\n1. **Never commit .env file**\n2. **Use App Password, not main password**\n3. **Rotate credentials regularly**\n4. **Plan OAuth migration ASAP**\n\n## Summary\n\nYou're 100% correct - the current auth setup is not production-ready. It's using a quick implementation with App Passwords instead of proper OAuth. The app login should handle authentication, and we should be using Google OAuth with proper app registration.\n\nThis needs to be fixed before any real launch. The current setup is only suitable for development/testing.\n\n---\n\nAgent Analysis: Mail-01 has a fundamental authentication design flaw that needs addressing before production use.",
  "metadata": {
    "type": "launch_guide",
    "project": "mail01",
    "critical_issues": ["authentication", "oauth", "security"],
    "generated_by": "agent@lambda.run"
  }
}